{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kendallstrautman/Forestry/initial-project/starter-blog-next/src/components/BlogList.js\";\nimport React from \"react\";\nimport Link from \"next/link\";\nimport blogListStyles from \"../styles/components/bloglist.scss\";\nimport matter from \"gray-matter\";\nimport { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nvar BlogList = function BlogList() {\n  function getPosts() {\n    var posts = function (ctx) {\n      var keys = ctx.keys();\n      var values = keys.map(ctx);\n      var data = keys.map(function (key, index) {\n        // Create slug from filename\n        var slug = key.replace(/^.*[\\\\\\/]/, \"\").split(\".\").slice(0, -1).join(\".\");\n        var value = values[index]; // Parse document\n\n        var document = matter(value[\"default\"]);\n        return {\n          document: document,\n          slug: slug\n        };\n      });\n      return data;\n    }(require.context(\"../posts\", true, /\\.md$/));\n\n    return posts;\n  }\n\n  function truncateSummary(content) {\n    var summary = content.slice(0, 200).trimEnd();\n    return summary;\n  }\n\n  function reformatDate(fullDate) {\n    return date = fullDate.toDateString().slice(4);\n  }\n\n  function renderPosts(posts) {\n    console.log(posts);\n    return posts.map(function (post) {\n      return React.createElement(Link, {\n        key: post.slug,\n        href: {\n          pathname: \"/blog\",\n          query: {\n            id: post.slug\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: blogListStyles.li,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: blogListStyles.hero_image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: post.document.data.hero_image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: blogListStyles.blog__info,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, post.document.data.title), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \" \", post.document.data.date.toDateString().slice(4)), React.createElement(ReactMarkdown, {\n        source: truncateSummary(post.document.content),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }))));\n    });\n  }\n\n  var _useState = useState(getPosts()),\n      _useState2 = _slicedToArray(_useState, 1),\n      posts = _useState2[0];\n\n  return React.createElement(\"ul\", {\n    className: blogListStyles.list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, posts.length > 1 && renderPosts(posts));\n};\n\nexport default BlogList;","map":{"version":3,"sources":["/Users/kendallstrautman/Forestry/initial-project/starter-blog-next/src/components/BlogList.js"],"names":["Link","blogListStyles","matter","useState","ReactMarkdown","BlogList","getPosts","posts","ctx","keys","values","map","data","key","index","slug","replace","split","slice","join","value","document","require","context","truncateSummary","content","summary","trimEnd","reformatDate","fullDate","date","toDateString","renderPosts","console","log","post","pathname","query","id","li","hero_image","blog__info","title","list","length"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport blogListStyles from \"../styles/components/bloglist.scss\";\nimport matter from \"gray-matter\";\nimport { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst BlogList = () => {\n  function getPosts() {\n    const posts = (ctx => {\n      const keys = ctx.keys();\n      const values = keys.map(ctx);\n      const data = keys.map((key, index) => {\n        // Create slug from filename\n        const slug = key\n          .replace(/^.*[\\\\\\/]/, \"\")\n          .split(\".\")\n          .slice(0, -1)\n          .join(\".\");\n        const value = values[index];\n        // Parse document\n        const document = matter(value.default);\n        return {\n          document,\n          slug\n        };\n      });\n      return data;\n    })(require.context(\"../posts\", true, /\\.md$/));\n    return posts;\n  }\n  function truncateSummary(content) {\n    const summary = content.slice(0, 200).trimEnd();\n    return summary;\n  }\n  function reformatDate(fullDate) {\n    return (date = fullDate.toDateString().slice(4));\n  }\n  function renderPosts(posts) {\n    console.log(posts);\n    return posts.map(post => (\n      <Link\n        key={post.slug}\n        href={{ pathname: \"/blog\", query: { id: post.slug } }}\n      >\n        <li className={blogListStyles.li}>\n          <div className={blogListStyles.hero_image}>\n            <img src={post.document.data.hero_image} />\n          </div>\n          <div className={blogListStyles.blog__info}>\n            <h1>{post.document.data.title}</h1>\n            <h3> {post.document.data.date.toDateString().slice(4)}</h3>\n            <ReactMarkdown source={truncateSummary(post.document.content)} />\n          </div>\n        </li>\n      </Link>\n    ));\n  }\n  const [posts] = useState(getPosts());\n  return (\n    <ul className={blogListStyles.list}>\n      {posts.length > 1 && renderPosts(posts)}\n    </ul>\n  );\n};\n\nexport default BlogList;\n"]},"metadata":{},"sourceType":"module"}